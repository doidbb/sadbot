#!/usr/bin/env bash

ppp() {														#post processing prefix function (parses certain types of inputs)
    strip=$(echo $output | awk -F ']' '{print $NF}')   #removes prefixes
    
    if [[ $output =~ "[me]" ]]; then      #searches for prefixes in input and chooses
	    msg_act $chan $strip                 #appropriate output function
    elif [[ $output =~ "[msg]" ]]; then
	    msg_out $chan $strip
    elif [[ $output =~ "[rb]" ]]; then
 	    msg_rbc $chan $strip
    elif [[ $output =~ "[col]" ]]; then
        msg_col $chan ${strip:1} ${strip:0:1}
    elif [[ $output =~ "[k]" ]]; then
	    if [[ $strip =~ "sadbot" ]]; then
            msg_out $chan "nice try"
	    else
	        kick $chan $strip
	    fi
    else 
        msg_out $chan $output    #sends arguments to module 
    fi
}

handle() {
    if [[ $(get_chan $msg_in) = $NICK ]]; then    #checks if private message is being recieved
        chan=$(get_nick $msg_in)                 #if so, sets the output directly back to the sender
    else
        chan=$(get_chan $msg_in)                 #otherwise set the output as the channel of origin
    fi
                              
    output=$(${1} "$(get_nick $msg_in)" "$arg" "$msg_in")

    if [[ $output ]]; then                   #checks if script will actually output before sending
        ppp
    fi
}

parse() {
    IFS=$'\r\n' MODULES=($(for file in ./modules/*; do echo ${file##*/}; done))     #makes an array filled with the contents of ./modules
    IFS=$'\r\n' TRIGGERS=($(for file in ./triggers/*; do echo ${file##*/}; done))   #makes an array filled with the contents of ./triggers
    IFS=$'\r\n' ADMINMODS=($(for file in ./modules/admin/*; do echo ${file##*/}; done))   #makes an array filled with the contents of ./triggers
    
    IFS=':' read -r raw cut <<< "$msg_in"; IFS=':' read -r raw arg <<< "$cut"          #cuts raw message to first : (first character) and then to second : character
    first_word=${arg%% *}                                       #obtains the first word of the message e.g (:raw     ::trikt   ==>  :raw)
    
    for mod in ${MODULES[@]}; do                                    #loads modules
        for prefix in ${PREFIXES[@]}; do                            #loads prefixes from config
            if [[ "$first_word" = "$prefix$mod" ]]; then           #checks if the first word of the message is equal to any of the modules in the array
                IFS="${mod: -1}" read -r raw arg <<< "$arg"         #gets the last character of the module and prints all after it :say test (everything after 'y' ==> test)
                handle "./modules/$mod"    
            fi
        done
    done
    
    for adminmod in ${ADMINMODS[@]}; do                                    #loads modules
        for admin in ${ADMINS[@]}; do
            for prefix in ${PREFIXES[@]}; do                            #loads prefixes from config
                if [[ "$first_word" = "$prefix$adminmod" && $(get_nick $msg_in) = $admin ]]; then           #checks if the first word of the message is equal to any of the modules in the array
                    IFS="${adminmod: -1}" read -r raw arg <<< "$arg"         #gets the last character of the module and prints all after it :say test (everything after 'y' ==> test)
                    handle "./modules/admin/$adminmod"    
            	fi
	    done
        done
    done
    
    for trig in ${TRIGGERS[@]}; do
        if [[ $msg_in =~ " PRIVMSG " && ! $msg_in =~ ":py-ctcp" ]]; then    #only respond to triggers if detecting a PRIVMSG and not from py-ctcp
            handle "./triggers/$trig"
        fi
    done
}
	
# shit's not ready
# will be in future releases i guess
log() {
    folderchan=$(echo $(get_chan $msg_in) | sed 's/\//-/g')
    IFS=':' read -r raw cut <<< "$msg_in"; IFS=':' read -r raw message <<< "$cut"                      #cuts raw message to first : (first character) and 
                                                                                                       #cuts raw message to first second : (first character)
    if [[ -f ./logs/$folderchan ]] ; then
        echo $(date +"%d/%m/%Y %H:%M:%S" | sed 's/[A-Za-z]ST 201[0-9]//g'): "<$(get_nick $msg_in)> ${message}" >> ./logs/$folderchan
    else
        touch ./logs/$folderchan
        echo $(date +"%d/%m/%Y %H:%M:%S" | sed 's/[A-Za-z]ST 201[0-9]//g'): "<$(get_nick $msg_in)> ${message}" >> ./logs/$folderchan
    fi
    cat ./logs/$folderchan | sed -i 's/ACTION/*/' ./logs/$folderchan
}

join() {
    for chan in ${CHANNEL[@]}; do
        echo "» Joining $chan"
	    echo "JOIN $chan" >&3;
    done
}

ident() {
    echo "NICK :${NICK}" >&3;
    echo "PRIVMSG nickserv :IDENTIFY ${PASSWORD}" >&3;
    echo "» Identified with nickserv"
}

ghost() {
    if [[ $msg_in =~ "${NICK} :Nickname is already in use." ]] ; then
        echo "NICK :${NICK_ALT}" >&3;
        echo "PRIVMSG nickserv :GHOST ${NICK} ${PASSWORD}" >&3;
        sleep 2;
        ghost=false
        join
        sleep 2;
        ident
    fi
}

get_nick() {
    local channick=$(echo ${1} | awk -F":" '{print $2}' | awk -F"\!" '{print $1}' 2>/dev/null)
    echo $channick
}

get_chan() {
    local nickchan=$(echo ${1} | awk '{print $3}')
    echo $nickchan
}

ping() {
    if [[ $msg_in =~ "PING" ]] ; then
#        echo $msg_in;
#        echo "PONG %s\n" "${msg_in:5}";
        echo "PONG %s\r\n" "${msg_in:5}" >&3; #don't ping out
    fi      
}  

kick() {
    echo "KICK ${1} :${2}" >&3;
}
       
msg_out() {
    echo "PRIVMSG ${1} :${2}" >&3;
}

msg_rbc() {
    echo "PRIVMSG ${1} :$(toilet --gay --irc -fterm ${2})" >&3;
}

msg_col() {
    echo "PRIVMSG ${1} :$(echo -ne "\003")${3}${2}" >&3;
}

msg_act() {
    echo "PRIVMSG ${1} :$(echo -ne "\001")ACTION ${2}$(echo -ne "\001")" >&3;
}
